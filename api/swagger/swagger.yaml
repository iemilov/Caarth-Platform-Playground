swagger: "2.0"
info:
  version: "0.0.3"
  title: Caafs
  description: Care and alarms facility systems REST API
basePath: /api
schemes:
  - http
  - https
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
    description: |
     For accessing the API a valid JWT token must be passed in all the queries in
     the 'Authorization' header.
  
  
     A valid JWT token is generated by the API and retourned as answer of a call
     to the route /login giving a valid user & password.
  
     The following syntax must be used in the 'Authorization' header :
  
         Bearer xxxxxx.yyyyyyy.zzzzzz

consumes:
  - application/json
  - text/html
produces:
  - application/json
  - text/html
    
paths:

  /login:
    x-swagger-router-controller: users
    post:
      tags: 
        - Users
      operationId: loginPost
      description: "Login and get token (either fo user or for admin)"
      parameters:
        - name: authentication
          in: body
          required: true
          schema:
            $ref: "#/definitions/Authentication"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Token"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

  /users:
    x-swagger-router-controller: users
    get:
      tags: 
        - Users
      operationId: usersGet
      description: "Get all users, only accessible to 'admins'"
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
      security:
        - Bearer: []
      x-security-scopes:
        - admin
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Users"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    post:
      tags: 
        - Users
      operationId: usersPost
      description: "Create new user, only accessible to 'admins'"
      parameters:
        - in: body
          name: user
          description: The user to create.
          required: true
          schema:
            $ref: "#/definitions/NewUser"
        - name: Authorization
          in: header
          required: true
          type: string
      security:
        - Bearer: []
      x-security-scopes:
        - admin
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/NewUser"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  
  /users/{username}:
    x-swagger-router-controller: users
    put:
      tags: 
        - Users
      operationId: usersPut
      description: "Update user, only accessible to 'admins'"
      parameters:
        - name: username
          in: path
          required: true
          type: string
        - name: delta
          in: body
          required: true
          schema:
            $ref: "#/definitions/DeltaUser"
        - name: Authorization
          in: header
          required: true
          type: string
      security:
        - Bearer: []
      x-security-scopes:
        - admin
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/NewUser"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

    get:
      tags: 
        - Users
      operationId: userGet
      description: "Get one particular user, only accessible to 'admins'"
      parameters:
        - name: username
          in: path
          required: true
          type: string
        - name: Authorization
          in: header
          required: true
          type: string
      security:
        - Bearer: []
      x-security-scopes:
        - admin
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/NewUser"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

    delete:
      tags: 
        - Users
      operationId: userDelete
      description: "Delete one particular user, only accessible to 'admins'"
      parameters:
        - name: username
          in: path
          required: true
          type: string
        - name: Authorization
          in: header
          required: true
          type: string
      security:
        - Bearer: []
      x-security-scopes:
        - admin
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Resource"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

  /devices:
    x-swagger-router-controller: devices
    post:
      tags: 
        - Devices
      operationId: devicesPost
      description: "Create device (only accessible for admins)"
      parameters:
        - name: device
          in: body
          required: true
          schema:
            $ref: "#/definitions/Device"
        - name: Authorization
          in: header
          required: true
          type: string
      security:
        - Bearer: []
      x-security-scopes:
        - admin
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Resource"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags: 
        - Devices
      operationId: devicesGet
      description: "Get devices (accessible for admins and users)"
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
      security:
        - Bearer: []
      x-security-scopes:
        - admin
        - user
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Devices"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

  /devices/{deviceid}/addCommand:
    x-swagger-router-controller: devices
    patch:
      tags: 
        - Devices
      operationId: SensorsCommandsAdd
      description: "Add new command to device (accessible for admins)"
      parameters:
        - name: deviceid
          in: path
          required: true
          type: string
        - name: command
          in: body
          required: true
          schema:
            $ref: "#/definitions/Command"
        - name: Authorization
          in: header
          required: true
          type: string
      security:
        - Bearer: []
      x-security-scopes:
        - admin
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Resource"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

  /devices/{deviceid}/removeCommand:
    x-swagger-router-controller: devices
    patch:
      tags: 
        - Devices
      operationId: SensorsCommandsRemove
      description: "Remove command from device (accessible for admins)"
      parameters:
        - name: deviceid
          in: path
          required: true
          type: string
        - name: command
          in: body
          required: true
          schema:
            $ref: "#/definitions/Command"
        - name: Authorization
          in: header
          required: true
          type: string
      security:
        - Bearer: []
      x-security-scopes:
        - admin
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Resource"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

  /devices/{deviceid}/addSensor:
    x-swagger-router-controller: devices
    patch:
      tags: 
        - Devices
      operationId: SensorsCommandsAdd
      description: "Add sensor to device (accessible for admins)"
      parameters:
        - name: deviceid
          in: path
          required: true
          type: string
        - name: sensor
          in: body
          required: true
          schema:
            $ref: "#/definitions/Sensor"
        - name: Authorization
          in: header
          required: true
          type: string
      security:
        - Bearer: []
      x-security-scopes:
        - admin
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Resource"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

  /devices/{deviceid}/removeSensor:
    x-swagger-router-controller: devices
    patch:
      tags: 
        - Devices
      operationId: SensorsCommandsRemove
      description: "Remove sensor from device (accessible for admins)"
      parameters:
        - name: deviceid
          in: path
          required: true
          type: string
        - name: sensor
          in: body
          required: true
          schema:
            $ref: "#/definitions/Sensor"
        - name: Authorization
          in: header
          required: true
          type: string
      security:
        - Bearer: []
      x-security-scopes:
        - admin
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Resource"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

  /devices/{deviceid}:
    x-swagger-router-controller: devices
    put:
      tags: 
        - Devices
      operationId: devicesPut
      description: "Update particular device (accessible for admins)"
      parameters:
        - name: deviceid
          in: path
          required: true
          type: string
        - name: deviceparameter
          in: body
          required: true
          schema:
            $ref: "#/definitions/DeviceUpdate"
        - name: Authorization
          in: header
          required: true
          type: string
      security:
        - Bearer: []
      x-security-scopes:
        - admin
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Resource"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags: 
        - Devices
      operationId: deviceGet
      description: "Get particular device (accessible for admins and users)"
      parameters:
        - name: deviceid
          in: path
          required: true
          type: string
        - name: Authorization
          in: header
          required: true
          type: string
      security:
        - Bearer: []
      x-security-scopes:
        - admin
        - users
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Device"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags: 
        - Devices
      operationId: deviceDelete
      description: "Delete particular device (accessible for only admins)"
      parameters:
        - name: deviceid
          in: path
          required: true
          type: string
        - name: Authorization
          in: header
          required: true
          type: string
      security:
        - Bearer: []
      x-security-scopes:
        - admin
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Resource"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"


  /rules:
    x-swagger-router-controller: rules
    post:
      tags: 
        - Rules
      operationId: rulesPost
      description: "Create rule (accessible only for admins)"
      parameters:
        - name: rule
          in: body
          required: true
          schema:
            $ref: "#/definitions/Rules"
        - name: Authorization
          in: header
          required: true
          type: string
      security:
        - Bearer: []
      x-security-scopes:
        - admin
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Resource"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags: 
        - Rules
      operationId: rulesGet
      description: "Get rules (accessible for admins and users)"
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
      security:
        - Bearer: []
      x-security-scopes:
        - admin
        - user
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Devices"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"


  /rules/{rulename}:
    x-swagger-router-controller: rules
    put:
      tags: 
        - Rules
      operationId: rulesPut
      description: "Update particular rule (accessible for admins)"
      parameters:
        - name: rulename
          in: path
          required: true
          type: string
        - name: newruleparameter
          in: body
          required: true
          schema:
            $ref: "#/definitions/UpdateRule"
        - name: Authorization
          in: header
          required: true
          type: string
      security:
        - Bearer: []
      x-security-scopes:
        - admin
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Resource"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags: 
        - Rules
      operationId: ruleGet
      description: "Get particular rule (accessible for admins and users)"
      parameters:
        - name: rulename
          in: path
          required: true
          type: string
        - name: Authorization
          in: header
          required: true
          type: string
      security:
        - Bearer: []
      x-security-scopes:
        - admin
        - users
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Rules"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags: 
        - Rules
      operationId: rulesDelete
      description: "Delete particular rule (accessible for only admins)"
      parameters:
        - name: rulename
          in: path
          required: true
          type: string
        - name: Authorization
          in: header
          required: true
          type: string
      security:
        - Bearer: []
      x-security-scopes:
        - admin
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Resource"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

  /rules/{rulename}/addObject:
    x-swagger-router-controller: rules
    patch:
      tags: 
        - Rules
      operationId: addObjectPut
      description: "Add Object with deviceid to a particular rule (accessible for admins)"
      parameters:
        - name: rulename
          in: path
          required: true
          type: string
        - name: object
          in: body
          required: true
          schema:
            $ref: "#/definitions/Objects"
        - name: Authorization
          in: header
          required: true
          type: string
      security:
        - Bearer: []
      x-security-scopes:
        - admin
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Resource"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

  /rules/{rulename}/removeObject:
    x-swagger-router-controller: rules
    patch:
      tags: 
        - Rules
      operationId: removeObjectPut
      description: "Remove object with deviceid from a particular rule (accessible for admins)"
      parameters:
        - name: rulename
          in: path
          required: true
          type: string
        - name: object
          in: body
          required: true
          schema:
            $ref: "#/definitions/Objects"
        - name: Authorization
          in: header
          required: true
          type: string
      security:
        - Bearer: []
      x-security-scopes:
        - admin
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Resource"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

  /rules/{rulename}/removeMAIL:
    x-swagger-router-controller: rules
    patch:
      tags: 
        - Rules
      operationId: removeMailPut
      description: "Remove mail receiver from a particular rule (accessible for admins)"
      parameters:
        - name: rulename
          in: path
          required: true
          type: string
        - name: mail
          in: body
          required: true
          schema:
            $ref: "#/definitions/Emails"
        - name: Authorization
          in: header
          required: true
          type: string
      security:
        - Bearer: []
      x-security-scopes:
        - admin
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Resource"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

  /rules/{rulename}/addMAIL:
    x-swagger-router-controller: rules
    patch:
      tags: 
        - Rules
      operationId: addMailPut
      description: "Add mail receiver from a particular rule (accessible for admins)"
      parameters:
        - name: rulename
          in: path
          required: true
          type: string
        - name: mail
          in: body
          required: true
          schema:
            $ref: "#/definitions/Emails"
        - name: Authorization
          in: header
          required: true
          type: string
      security:
        - Bearer: []
      x-security-scopes:
        - admin
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Resource"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

  /allAlarms:
    x-swagger-router-controller: alarms
    delete:
      tags: 
        - Alarms
      operationId: allAlarmsDelete
      description: "Delete all alarms, accessable for admins and users"
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
      security:
        - Bearer: []
      x-security-scopes:
        - admin
        - users
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Devices"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

    get:
      tags: 
        - Alarms
      operationId: alarmsget
      description: "Get alarms, accessable for admins and users"
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
      security:
        - Bearer: []
      x-security-scopes:
        - admin
        - users
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Devices"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

  /pickedAlarms:
    x-swagger-router-controller: alarms
    delete:
      tags: 
        - Alarms
      operationId: alarmsdelete
      description: "Delete several alarms, accessable for admins"
      parameters:
        - name: alarm
          in: body
          required: true
          schema:
            $ref: "#/definitions/RemoveAlarms"
        - name: Authorization
          in: header
          required: true
          type: string
      security:
        - Bearer: []
      x-security-scopes:
        - admin
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Resource"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

  /alarmid:
    x-swagger-router-controller: alarms
    patch:
      tags: 
        - Alarms
      operationId: alarmput
      description: "Update alarm status, accessable for admins and users"
      parameters:
        - name: alarm
          in: body
          required: true
          schema:
            $ref: "#/definitions/Alarm"
        - name: Authorization
          in: header
          required: true
          type: string
      security:
        - Bearer: []
      x-security-scopes:
        - admin
        - users
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Devices"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

  /alarms/{object}:
    x-swagger-router-controller: alarms
    get:
      tags: 
        - Alarms
      operationId: alarmget
      description: "get all alarms for a particular object, accessable for admins and users"
      parameters:
        - name: object
          in: path
          required: true
          type: string
        - name: Authorization
          in: header
          required: true
          type: string
      security:
        - Bearer: []
      x-security-scopes:
        - admin
        - users
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Resource"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
        - Alarms
      operationId: alarmsObjectDelete
      description: "Delete all alarms for a particular object, accessable for admins and users"
      parameters:
        - name: object
          in: path
          required: true
          type: string
        - name: Authorization
          in: header
          required: true
          type: string
      security:
        - Bearer: []
      x-security-scopes:
        - admin
        - users
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Resource"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

  /alarms/{object}/alarm/{alarmid}:
    x-swagger-router-controller: alarms
    get:
      tags: 
        - Alarms
      operationId: getAlarmId
      description: "Get one alarm for a particular object and deviceid, accessable for admins and users"
      parameters:
        - name: object
          in: path
          required: true
          type: string
        - name: alarmid
          in: path
          required: true
          type: string
        - name: Authorization
          in: header
          required: true
          type: string
      security:
        - Bearer: []
      x-security-scopes:
        - admin
        - users
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Resource"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags: 
        - Alarms
      operationId: alarmdelete
      description: "Delete particular alarm, accessable for admins"
      parameters:
        - name: object
          in: path
          required: true
          type: string
        - name: alarmid
          in: path
          required: true
          type: string
        - name: Authorization
          in: header
          required: true
          type: string
      security:
        - Bearer: []
      x-security-scopes:
        - admin
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Resource"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  
  /sendcommand/{deviceid}:
    x-swagger-router-controller: device.methods
    post:
      tags: 
        - Device Management
      operationId: methodspost
      description: "Send a command ('startTelemetry', 'stopTelemetry', 'setNewInterval', 'uploadLogs', 'reboot', 'firmwareUpdate') to device, accessable for admins"
      parameters:
        - name: command
          in: body
          required: true
          schema:
            $ref: "#/definitions/DMcommand"
        - name: deviceid
          in: path
          required: true
          type: string
        - name: Authorization
          in: header
          required: true
          type: string
      security:
        - Bearer: []
      x-security-scopes:
        - admin
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DMresponse"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

  /logs/{deviceid}:
    x-swagger-router-controller: device.methods
    get:
      tags: 
        - Device Management
      operationId: getlogs
      description: "Download logs for a particular device (method 'uploadLogs' should be executed at least once before), accessable for admins"
      parameters:
        - name: deviceid
          in: path
          required: true
          type: string
        - name: Authorization
          in: header
          required: true
          type: string
      security:
        - Bearer: []
      x-security-scopes:
        - admin
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Logs"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

  /monitor/{deviceid}:
    x-swagger-router-controller: device.methods
    get:
      tags: 
        - Device Management
      operationId: getmonitor
      description: "Get monitor data (cpu, ram and etc.) for a particular device after executing particular method on a device, accessable for admins"
      parameters:
        - name: deviceid
          in: path
          required: true
          type: string
        - name: Authorization
          in: header
          required: true
          type: string
      security:
        - Bearer: []
      x-security-scopes:
        - admin
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Resource"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

  /progress/{deviceid}:
    x-swagger-router-controller: device.methods
    get:
      tags: 
        - Device Management
      operationId: getprogress
      description: "Get the progress for a particular activity started on a device, accessable for admins"
      parameters:
        - name: deviceid
          in: path
          required: true
          type: string
        - name: Authorization
          in: header
          required: true
          type: string
      security:
        - Bearer: []
      x-security-scopes:
        - admin
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DMprogress"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

  /endpoint/{deviceid}:
    x-swagger-router-controller: device.methods
    get:
      tags: 
        - Device Management
      operationId: methods_getendpoint
      description: "Get connection endpoint for a device (only one time operation per device), accessable for admins"
      parameters:
        - name: deviceid
          in: path
          required: true
          type: string
        - name: Authorization
          in: header
          required: true
          type: string
      security:
        - Bearer: []
      x-security-scopes:
        - admin
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DMendpoint"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags: 
        - Device Management
      operationId: methods_putendpoint
      description: "Create new connection endpoint for a device (only one time operation), accessable for admins"
      parameters:
        - name: deviceid
          in: path
          required: true
          type: string
        - name: Authorization
          in: header
          required: true
          type: string
      security:
        - Bearer: []
      x-security-scopes:
        - admin
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CreateEndpoint"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

  /metadata/{deviceid}:
    x-swagger-router-controller: device.methods
    get:
      tags: 
        - Device Management
      operationId: getmetadata
      description: "Get metadata for a particular device (OS version, cpu cores, FW version and etc.) after executing particular method on a device, accessable for admins"
      parameters:
        - name: deviceid
          in: path
          required: true
          type: string
        - name: Authorization
          in: header
          required: true
          type: string
      security:
        - Bearer: []
      x-security-scopes:
        - admin
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DMmetadata"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

  /waitingjob/{deviceid}:
    x-swagger-router-controller: device.methods
    get:
      tags: 
        - Device Management
      operationId: getjob
      description: "Get waiting job for a particular device executed during device is unavailable, accessable for admins. Only one command can be in waiting mode per device. Every new command will overrite the previuos one. Once the device is online again the last waiting command will be executed !"
      parameters:
        - name: deviceid
          in: path
          required: true
          type: string
        - name: Authorization
          in: header
          required: true
          type: string
      security:
        - Bearer: []
      x-security-scopes:
        - admin
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DMwaitingjob"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

  /statistic:
    x-swagger-router-controller: statistic
    get:
      tags: 
        - Statistic
      operationId: getstatistic
      description: "Get statistic data, accessable for users and admins"
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
      security:
        - Bearer: []
      x-security-scopes:
        - admin
        - user
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Statistic"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

  /alarmReports:
    x-swagger-router-controller: statistic
    get:
      tags: 
        - Statistic
      operationId: getAllarmReports
      description: "Get report of all alarms resolved manullay (by technicians, etc.), accessable for users and admins"
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
      security:
        - Bearer: []
      x-security-scopes:
        - admin
        - user
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Alarm"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

  /notifications:
    x-swagger-router-controller: statistic
    get:
      tags: 
        - Statistic
      operationId: getNotifications
      description: "Get report of all sent email notifications, accessable for users and admins"
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
      security:
        - Bearer: []
      x-security-scopes:
        - admin
        - user
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Notifications"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

  /ActivityLogs:
    x-swagger-router-controller: activity
    get:
      tags: 
        - ActivityLogs
      operationId: getActivity
      description: "Get backend logs, accessable for admins"
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
      security:
        - Bearer: []
      x-security-scopes:
        - admin
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Resource"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

  /TelemetryObject/{object}/sensor/{sensor}:
    x-swagger-router-controller: telemetry
    get:
      tags: 
        - Telemetry
      operationId: getTelemetryObject
      description: "Get telememetry data per object, accessable for admins and users"
      parameters:
        - name: object
          in: path
          required: true
          type: string
        - name: sensor
          in: path
          required: true
          type: string
        - name: Authorization
          in: header
          required: true
          type: string
      security:
        - Bearer: []
      x-security-scopes:
        - admin
        - user
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Resource"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"


  /TelemetryObject/{object}/allSensors:
    x-swagger-router-controller: telemetry
    get:
      tags: 
        - Telemetry
      operationId: getTelemetryObjectAll
      description: "Get all sensorreadings data per object, accessable for admins and users"
      parameters:
        - name: object
          in: path
          required: true
          type: string
        - name: Authorization
          in: header
          required: true
          type: string
      security:
        - Bearer: []
      x-security-scopes:
        - admin
        - user
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Resource"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

  /TelemetryDevice/{deviceid}/sensor/{sensor}:
    x-swagger-router-controller: telemetry
    get:
      tags: 
        - Telemetry
      operationId: getTelemetryDevice
      description: "Get telememetry data per device, accessable for admins and users"
      parameters:
        - name: deviceid
          in: path
          required: true
          type: string
        - name: sensor
          in: path
          required: true
          type: string
        - name: Authorization
          in: header
          required: true
          type: string
      security:
        - Bearer: []
      x-security-scopes:
        - admin
        - user
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Resource"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

  /Telemetry/CSV:
    x-swagger-router-controller: telemetry
    get:
      tags: 
        - Telemetry
      operationId: getTelemetryCSV
      description: "Get all telememetry data in CSV, accessable for admins and users"
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
      security:
        - Bearer: []
      x-security-scopes:
        - admin
        - user
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Resource"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
            
definitions:
  Authentication:
    type: object
    required:
    - username
    - password
    properties:
      username:
        type: string
        example: "exampleuser@xyz.com"
      password:
        type: string
        example: "password"
  NewUser:
    type: object
    required:
    - username
    - name
    - password
    - role
    properties:
      username:
        type: string
        example: "username@gmail.com"
      name:
        type: string
        example: "example user"
      password:
        type: string
        example: "password"
      role:
        type: string
        example: "admin"
      phone:
        type: integer
        example: 123456789
  DeltaUser:
    type: object
    properties:
      name:
        type: string
        example: "example user"
      password:
        type: string
        example: "password"
      role:
        type: string
        example: "admin"
      phone:
        type: integer
        example: 123456789
  Resource:
    type: object
    properties:
      resource:
        type: string
  Token:
    type: object
    properties:
      token:
        type: string
  Error:
    type: object
    properties:
      message:
        type: string
  Success:
    type: object
    properties:
      message:
        type: string
        example: user created successfully
  Users:
    type: array
    items:
      type: object
  Devices:
    type: array
    items:
      type: object

  Device:
    type: object
    required:
    - deviceid
    - object
    - sensors
    - commands
    - location
    properties:
      deviceid:
        type: string
        example: "device01"
      object:
        type: string
        example: "elevatorAB"
      sn:
        type: string
        example: 12345gfd
      status:
        type: string
        example: "none"
      sensors:
        type: array
        items:
          type: object
          required:
          - sensorType
          - unit
          properties:
            sensorType:
              type: string
              example: "temperature"
            unit:
              type: string
              example: "C°"
      commands:
        type: array
        items:
          type: object
          required:
          - commandType
          properties:
            commandType:
              type: string
              example: "startTelemetry"
      location:
        type: string
        example: "AlexanderPlatz8"


  DeviceUpdate:
    type: object
    properties:
      object:
        type: string
        example: "elevatorAB"
      sn:
        type: integer
        example: 12345gfd
      status:
        type: string
        example: "none"
      sensors:
        type: array
        items:
          type: object
          properties:
            sensorType:
              type: string
              example: "temperature"
            unit:
              type: string
              example: "C°"
      commands:
        type: array
        items:
          type: object
          properties:
            commandType:
              type: string
              example: "startTelemetry"
      location:
        type: string
        example: "Alexanderstrasse"

  Rules:
    type: object
    required:
    - rulename
    - tag
    - objects
    - condition
    - actions
    - enable
    properties:
      rulename:
        type: string
        example: "temperaturethreshold"
      description:
        type: string
        example: notify me if temperature reaches 24 degree
      tag:
        type: string
        example: elevator
      objects:
        type: array
        items:
          type: object
          required:
          - object
          - deviceid
          properties:
            object:
              type: string
              example: elevator01
            deviceid:
              type: string
              example: device01
      condition:
        type: object
        required:
        - name
        properties:
          name:
            type: string
            example: threshold
          sensor:
            type: string
            example: temperature
          value:
            type: integer
            example: 24
          operator:
            type: string
            example: ">"
      actions:
        type: object
        properties:
          alarm:
            type: boolean
            example: true
          notifyMail:
            type: boolean
            example: true
      mailReceiver:
        type: array
        items:
          type: object
          properties:
            mail:
              type: string
              example: john.doe@gmail.com   
      enable:
        type: boolean
        example: true

  UpdateRule:
    type: object
    properties:
      description:
        type: string
        example: notify me if temperature reaches 24 degree
      tag:
        type: string
        example: elevator
      objects:
        type: array
        items:
          type: object
          properties:
            object:
              type: string
              example: elevator02
            deviceid:
              type: string
              example: device02
      condition:
        type: object
        properties:
          name:
            type: string
            example: threshold
          sensor:
            type: string
            example: temperature
          value:
            type: integer
            example: 24
          operator:
            type: string
            example: ">"
      actions:
        type: object
        properties:
          alarm:
            type: string
            example: true
          notifyMail:
            type: string
            example: true
      mailReceiver:
        type: array
        items:
          type: object
          properties:
            mail:
              type: string
              example: john.doe@gmail.com 
      enable:
        type: boolean
        example: true

  Objects:
    type: object
    required:
    - object
    - deviceid
    properties:
      object:
        type: string
        example: elevator02
      deviceid:
        type: string
        example: device02

  Emails:
    type: object
    required:
    - mail
    properties:
      mail:
        type: string
        example: john.doe@gmail.com 

  Alarm:
    type: object
    required:
    - object
    - alarmid
    - event
    - status
    - activity
    properties:
      object:
        type: string
        example: "elevator12"
      alarmid:
        type: string
        example: "12345_device01"
      event:
        type: string
        example: resolved by technician XYZ
      status:
        type: string
        example: "resolved or in processing"
      activity:
        type: string
        example: "sensor replacement"

  RemoveAlarm:
    type: object
    properties:
      object:
        type: string
        example: "elevator12"
      alarmid:
        type: string
        example: 1234_device01
  RemoveAlarms:
    type: array
    items:
      type: object
      required:
      - object
      - alarmid
      properties:
        object:
          type: string
          example: "elevator12"
        alarmid:
          type: string
          example: "1234_device01"
  DMconfig :
    type: object
    properties:
      command:
        type: string
        example: "setNewInterval"
      payload:
        type: string
        example: "5000"
  DMresponse :
    type: object
    properties:
      payload:
        type: string
        example: "command was executed successfully"
  DMcommand:
    type: object
    required:
    - command
    properties:
      command:
        type: string
        example: "setNewInterval"
      payload:
        type: integer
        example: 1000
  Logs:
    type: object
    properties:
      text:
        type: string
        example: "device logs downloaded successfully"
  DMprogress:
    type: object
    properties:
      status:
        type: string
        example: "firmware upgrading complete"
  DMendpoint:
    type: object
    properties:
      endpoint:
        type: string
        example: "HostName=***.azure-devices.net;DeviceId=***;SharedAccessKey=***"
      message:
        type: string
        example: 'for security reasons this info will appear only once per device. Please copy and save this endpoint safe'
  CreateEndpoint:
    type: object
    properties:
      message:
        type: string
        example: new ednpoint was generated
  DMmetadata:
    type: object
    properties:
      text:
        type: string
        example: "metadata for the device"
  DMwaitingjob:
    type: object
    properties:
      commandId:
        type: string
        example: "setNewInterval"
      CommandRequestTime:
        type: string
        example: "2018-01-26T11:48:33.172Z"
      payload:
        type: string
        example: "3000"
  Statistic:
    type: object
    properties:
      allobjects:
        type: integer
        example: 10
      allDevices:
        type: integer
        example: 25
      activeDevices:
        type: integer
        example: 15
      activeAlarms:
        type: integer
        example: 100
      resolvedAlarms:
        type: integer
        example: 60
  Sensor:
    type: object
    required:
    - sensorType
    - unit
    properties:
      sensorType:
        type: string
        example: temperature
      unit:
        type: string
        example: C°
  Command:
    type: object
    required:
    - commandType
    properties:
      commandType:
        type: string
        example: setNewInterval
  Notifications:
    type: array
    items:
      type: object
      properties:
        allSentNotifications:
          type: integer
          example: 5
        email:
          type: string
          example: john.doe@hotmail.com
        status:
          type: string
          example: active
        sentTime:
          type: string
          example: '2018-03-01T21:22:01.358Z'
      
      


  
  

    

      

          

      